#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")

customs = ["custom.py"]
profile = ARGUMENTS.get("profile", "")
if profile:
    if os.path.isfile(profile):
        customs.append(profile)
    elif os.path.isfile(profile + ".py"):
        customs.append(profile + ".py")
opts = Variables(customs, ARGUMENTS)

opts.Add(BoolVariable("debug_symbols", "Build with debugging symbols", True))

if env.get("is_msvc", False):
    if env["debug_symbols"]:
        env.Append(CCFLAGS=["/Zi", "/FS"])
        env.Append(LINKFLAGS=["/DEBUG:FULL"])
else:
    if env["debug_symbols"]:
        env.Append(CCFLAGS=["-g2"])

# Try to detect the host platform automatically.
# This is used if no `platform` argument is passed
if sys.platform.startswith("linux"):
    default_platform = "linux"
elif sys.platform == "darwin":
    default_platform = "macos"
elif sys.platform == "win32" or sys.platform == "msys":
    default_platform = "windows"
elif ARGUMENTS.get("platform", ""):
    default_platform = ARGUMENTS.get("platform")
else:
    raise ValueError("Could not detect platform automatically, please specify with platform=<platform>")

platforms = ("linux", "windows")
opts.Add(
    EnumVariable(
        "platform",
        "Target platform",
        default_platform,
        allowed_values=platforms,
        ignorecase=2,
    )
)

env.Append(CPPPATH=["src/"])
sources = []
sources.append(Glob("src/*.cpp"))
sources.append(Glob("src/client/*.cpp"))
sources.append(Glob("src/server/*.cpp"))
sources.append(Glob("src/shared/*.cpp"))

library = env.SharedLibrary(
        "../voxelgame/bins/core-%s" % env["platform"],
        source=sources,
    )

Default(library)